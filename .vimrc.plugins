" -------------------------
" neocomplete / neocomplcache
" -------------------------
function! s:meet_neocomplete_requirements()
  return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction

let g:dictionaries = {
      \ 'default' : '',
      \ 'php' : $HOME . '/.vim/dict/php.dict',
      \ 'perl' : $HOME . '/.vim/dict/perl.dict',
      \ 'javascript' : $HOME . '/.vim/dict/javascript.dict',
      \ }

if s:meet_neocomplete_requirements()
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#sources#dictionary#dictionaries = g:dictionaries

  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif

  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><C-y> neocomplete#close_popup()
  inoremap <expr><C-e> neocomplete#cancel_popup()
  inoremap <expr><C-l> neocomplete#complete_common_string()
  inoremap <expr><C-g> neocomplete#undo_completion()

else
  let g:neocomplcache_enable_at_startup = 1
  let g:neocomplcache_min_syntax_length = 3
  let g:neocomplcache_enable_smart_case = 1
  let g:neocomplcache_dictionary_filetype_lists = g:dictionaries

  if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
  endif
  let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

  if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
  endif

  inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
  inoremap <expr><C-y> neocomplcache#close_popup()
  inoremap <expr><C-e> neocomplcache#cancel_popup()
  inoremap <expr><C-l> neocomplcache#complete_common_string()
  inoremap <expr><C-g> neocomplcache#undo_completion()
endif

inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" -------------------------
" ctrlp
" -------------------------
if executable('ag')
  let g:ctrlp_use_caching=0
  let g:ctrlp_user_command='ag %s -i --nocolor --nogroup --hidden -g ""'
endif
let g:ctrlp_cmd = 'CtrlPMenu'

" -------------------------
" vim-indent-guides
" -------------------------
autocmd FileType yaml :IndentGuidesEnable
let g:indent_guides_auto_colors=0
let g:indent_guides_guide_size=1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=236
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=238

" -------------------------
" tcomment
" -------------------------
let g:tcommentMapLeader1 = '<C-\>'

" -------------------------
" quickrun
" -------------------------
let g:quickrun_config = {}
let g:quickrun_config['_'] = {
      \   'runner' : 'vimproc',
      \   'runner/vimproc/updatetime' : 40,
      \   'outputter' : 'multi:buffer:quickfix',
      \   'outputter/buffer/into' : 1,
      \   'outputter/buffer/split' : ':botright 15sp',
      \   'outputter/buffer/close_on_empty' : 1,
      \   'hook/time/enable' : 1,
      \   'hook/close_quickfix/enable_exit' : 1,
      \   'hook/close_buffer/enable_failure' : 1,
      \   'hook/close_buffer/enable_empty_data' : 1,
      \ }
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
nnoremap <silent> <C-q> :QuickRun<CR>

" -------------------------
" fugitive
" -------------------------
set statusline+=%{fugitive#statusline()}

" -------------------------
" surround
" -------------------------
nmap ,s <Plug>Yssurround
nmap ,w <Plug>Csurround w
nmap ,c <Plug>Csurround
nmap ,d <Plug>Dsurround
xmap ,v <Plug>VSurround

" -------------------------
" auto-ctags
" -------------------------
let g:auto_ctags=1
let g:auto_ctags_directory_list = ['.git']

" -------------------------
" vim2hs
" -------------------------
let g:haskell_conceal = 0

" -------------------------
" ghcmod
" -------------------------
autocmd BufWritePost *.hs GhcModCheckAndLintAsync
